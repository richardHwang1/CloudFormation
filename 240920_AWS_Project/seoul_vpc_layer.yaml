---

Parameters:
  ProjectName:
    Type: String
    Description: Project Name
  RegionName:
    Type: String
    Description: Region Name

Mappings:
  CidrMap:
    ap-northeast-2:
      VpcCidr: 172.16.0.0/16
      PubSn1Cidr: 172.16.1.0/24
      PubSn2Cidr: 172.16.2.0/24
      PriSn3Cidr: 172.16.3.0/24
      PriSn4Cidr: 172.16.4.0/24
      DbSn5Cidr: 172.16.5.0/24
      DbSn6Cidr: 172.16.6.0/24
    ap-southeast-2:
      VpcCidr: 172.17.0.0/16
      PubSn1Cidr: 172.17.1.0/24
      PubSn2Cidr: 172.17.2.0/24
      PriSn3Cidr: 172.17.3.0/24
      PriSn4Cidr: 172.17.4.0/24
      DbSn5Cidr: 172.17.5.0/24
      DbSn6Cidr: 172.17.6.0/24
  AmiMap:
    ap-northeast-2:
      Ami: ami-07d737d4d8119ad79
    sa-east-1:
      Ami: ami-07a943af5a5ec252b

Conditions:
  CreateSgIngress: !Equals [!Ref "AWS::Region", ap-northeast-2] # If region is Seoul, create sg for instance


# VPC & Internet Gateway
Resources:
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [CidrMap, !Ref "AWS::Region", VpcCidr]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${RegionName}-vpc"

  MyIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${RegionName}-igw"

  MyIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIgw
      VpcId: !Ref MyVpc

# Public Subnet
  MyPubSn1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      AvailabilityZone: !Select [0, !GetAZs ''] # 0 = az a, 1 = az b, 2 = az c, ..., etc.
      CidrBlock: !FindInMap [CidrMap, !Ref "AWS::Region", PubSn1Cidr]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${RegionName}-pub-sn1"

  MyPubSn2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !FindInMap [CidrMap, !Ref "AWS::Region", PubSn2Cidr]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${RegionName}-pub-sn2"

  MyPubRt12:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-pub-rt12"

  MyPubRtAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPubRt12
      SubnetId: !Ref MyPubSn1

  MyPubRtAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPubRt12
      SubnetId: !Ref MyPubSn2

  MyPubRtDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPubRt12
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIgw

# Private Subnet
  MyPriSn3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !FindInMap [CidrMap, !Ref "AWS::Region", PriSn3Cidr]
      Tags:
        - Key: Name
          Value: "${ProjectName}-${RegionName}-pri-sn3"

  MyPriSn4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !FindInMap [CidrMap, !Ref "AWS::Region", PriSn4Cidr]
      Tags:
        - Key: Name
          Value: "${ProjectName}-${RegionName}-pri-sn4"

  MyPriRt34:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-pri-rt34"

  MyPriRtAssoc3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPriRt34
      SubnetId: !Ref MyPriSn3

  MyPriRtAssoc4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPriRt34
      SubnetId: !Ref MyPriSn4

  MyPriRtDefRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPriRt34
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatInstance

# Database Subnet
  MyDbSn5:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !FindInMap [CidrMap, !Ref "AWS::Region", DbSn5Cidr]
      Tags:
        - Key: Name
          Value: "${ProjectName}-${RegionName}-db-sn5"

  MyDbSn6:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !FindInMap [CidrMap, !Ref "AWS::Region", DbSn6Cidr]
      Tags:
        - Key: Name
          Value: "${ProjectName}-${RegionName}-db-sn6"

  MyDbRt56:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-db-rt56"

  MyDbRtAssoc5:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyDbRt56
      SubnetId: !Ref MyDbSn5

  MyDbRtAssoc6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyDbRt56
      SubnetId: !Ref MyDbSn6

  # Nat instance & security group

  NatInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [AmiMap, !Ref "AWS::Region", Ami]
      InstanceType: t2.micro
      # KeyName: !Ref KeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet: 
            - !Ref NatInstanceSg
          SubnetId: !Ref MyPubSn1
      SourceDestCheck: false
      Tags:
        - Key : Name
          Value : !Sub "${ProjectName}-${RegionName}-nat-instance"
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
          sysctl -p /etc/sysctl.conf
          yum install -y iptables-services
          systemctl start iptables
          systemctl enable iptables
          iptables -F
          iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          service iptables save

  NatInstanceSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVpc
      GroupDescription: !Sub "${AWS::Region} Nat Instance Security Group"
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !FindInMap [CidrMap, !Ref "AWS::Region", VpcCidr]
      Tags:
        - Key : Name
          Value : !Sub "${ProjectName}-${RegionName}-nat-instance-sg"

  NatInstanceSgIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateSgIngress
    Properties:
      GroupId: !GetAtt NatInstanceSg.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

# Outputs
Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref MyVpc
    Export:
      Name: VpcId
  PubSn1Id:
    Description: Public Subnet 1 ID
    Value: !Ref MyPubSn1
    Export:
      Name: PubSn1Id
  PubSn2Id:
    Description: Public Subnet 2 ID
    Value: !Ref MyPubSn2
    Export:
      Name: PubSn2Id
  WebSn3Id:
    Description: Private Subnet 3 ID
    Value: !Ref MyPriSn3
    Export:
      Name: PriSn3Id
  WebSn4Id:
    Description: Private Subnet 4 ID
    Value: !Ref MyPriSn4
    Export:
      Name: PriSn4Id
  DbSn5Id:
    Description: Database Subnet 5 ID
    Value: !Ref MyDbSn5
    Export:
      Name: DbSn5Id
  DbSn6Id:
    Description: Database Subnet 6 ID
    Value: !Ref MyDbSn6
    Export:
      Name: DbSn6Id
...